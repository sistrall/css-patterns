---
title: CSS Patterns
---

- t1 = row(3500, 0, 1000, 0, -30)
- t2 = row(3500, 0, 1000, 0, -15)
- t3 = row(3500, 0, 1000, 0,   0)
- t4 = row(3500, 0, 1000, 0, +15)
- t5 = row(3500, 0, 1000, 0, +30)

.step.opening{data: {x: 0, y: 0, scale: 3}}
  :markdown
    # CSS patterns

.step.sub-opening{data: {x: 0, y: 0, scale: 0.01, rotate: 90}}
  :markdown
    Something to make<br/>order in your CSS
    ===



.step.diversion{data: {x: 1000, y: 0, scale: 0.0001, rotate: 180}}
  :markdown
    A little diversion from last week:<br/>
    [What is code?](http://www.bloomberg.com/graphics/2015-paul-ford-what-is-code/)



.step.room-stats{data: {x: -2000, y: 0, z: 0}}
  :markdown
    # Room stats

.step.room-stats{data: {x: -2000, y: 0, z: 1000}}
  :markdown
    ## (hands up!)

.step.room-stats{data: {x: -2000, y: 0, z: 2000}}
  :markdown
    * How many devs?
    * Do you know CSS?
    * Do you use CSS everyday?
    * Languages similar to CSS?




.step.basic.css-basic.slide{data: t1.next}
  :markdown
    What is<br/>CSS?
    ===


.step.css-basic.slide{data: t1.next}
  :markdown
    Programming language?
    ===

    Mmmh, not so much
    ---

        p {
          color: beige;
        }

    ([yes, CSS has more then 16 colors](http://colours.neilorangepeel.com/), use them)

.step.css-basic.elements-of-css.slide{data: t1.next}
  :markdown
    Elements of CSS
    ===

    Rules, selectors, properties.<br/>
    And you are (almost) good to go!

.step.css-basic.slide{data: t1.next}
  :markdown
    # Different types of basic selector

        /* Element */
        h1 {}

        /* Class */
        .isolated {}

        /* Identifier */
        #products {}

    There's more, much more, but stick with that, for the moment.

.step.css-basic.slide{data: t1.next}
  :markdown
    # Power comes from composition

        /*
         * Composition allows to take advantage of
         * the HTML hierarchies (section and header
         * are HTML5 elements).
         */
        .main-column section header h1 {}

.step.css-basic.slide{data: t1.next}
  :markdown
    # Everything is in the **specificity**

        <header id="excerpt" class="important">
          <h1>I'm the title of the excerpt</h1>
        </header>

        /*
         * Who wins?
         */
        h1            { color: slategrey; }
        header h1     { color: bisque;    }
        .important h1 { color: lavender;  }
        #excerpt h1   { color: chocolate; }

    [Specificity calculator](http://specificity.keegan.st/) and
    [specificity hack](http://stackoverflow.com/questions/28299817/can-type-selectors-be-repeated-to-increase-specificity)
    may be useful.





.step.css-stats.slide{data: t2.next}
  :markdown
    # CSS from the real world: stats!

    * [Maptia](https://maptia.com/jacobmaentz/stories/ancestral-waters): [stats](http://cssstats.com/stats?url=https%3A%2F%2Fmaptia.com%2Fjacobmaentz%2Fstories%2Fancestral-waters)
    * [Medium](https://medium.com/tomorrow-in-progress/how-autonomous-vehicles-gave-us-our-streets-back-d59b4db92bee): [stats](http://cssstats.com/stats?url=https://medium.com/tomorrow-in-progress/how-autonomous-vehicles-gave-us-our-streets-back-d59b4db92bee)
    * [sistrall.it](http://www.sistrall.it/photographs/2015/01/12/cosa-bolle-in-pentola/): [stats](http://cssstats.com/stats?url=http://www.sistrall.it/photographs/2015/01/12/cosa-bolle-in-pentola/)

.step.css-stats.slide{data: t2.next}
  :markdown
    Thousands of rules and selectors?
    ===

    * Hundreds of properties? What the hell!
    * The point: **it's up to you, dev**.

.step.css-stats.slide{data: t2.next}
  :markdown
    The smaller the set of tools a language provides, the more the burden to decide how to use them lies with the developer
    ===

    Choose you're best practice<br/>and **stick with it**!
    ---

.step.css-stats.slide{data: t2.next}
  :markdown
    # Taming the beast: patterns (or, maybe better, **"architectural framework"**):

    * [OOCSS](https://github.com/stubbornella/oocss/wiki) (see, most of all, [the media object](http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/))
    * [SMACSS](https://smacss.com)
    * BEM ([officially](https://en.bem.info), but look at [this](https://css-tricks.com/bem-101/) and [this](http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/))





.step.intro.architectures.slide{data: t3.next}
  :markdown
    They use different approaches
    ===

.step.architectures.slide{data: t3.next}
  :markdown
    OOCSS says: split content from presentation, do it with classes.
    ===

        .media {}
        .media .img {}
        .media .img img {}
        .bd {}

.step.architectures.slide{data: t3.next}
  :markdown
    SMACSS
    ===

    Is all about categorizing CSS rules
    ---

.step.architectures.slide{data: t3.next}
  :markdown
        /* Base rules */
        html, body, form {
          margin: 0; padding: 0;
        }

        input[type=text] {
          border: 1px solid #999;
        }

        a {
          color: #039;
        }

.step.architectures.slide{data: t3.next}
  :markdown
        /* Layout rules */
        #header, #article, #footer {
          width: 960px;
          margin: auto;
        }

        #article {
          border: solid #CCC;
          border-width: 1px 0 0;
        }

.step.architectures.slide{data: t3.next}
  :markdown
        /* Module rules */
        .module > h2 {
            padding: 5px;
        }

        .module span {
            padding: 5px;
        }

.step.architectures.slide{data: t3.next}
  :markdown
        /* State rules */
        .is-tab-active {
          background-color: white;
          color: black;
        }

.step.architectures.slide{data: t3.next}
  :markdown
    # BEM moves on and says: select blocks, select elements inside them, when necessary modify them

        .media {}
        .media__img {}
        .media__img img {}
        .media__bd {}

        .media--reverse {}

    (and do all this stuff respecting a strict convention on class names)





.step.but.slide{data: t4.next}
  :markdown
    All these techniques use classes.
    ===

    That's fine, but... what if you decide to use a
    front-end framework based on classes too? Like, let's say:

    * [Bootstrap](http://getbootstrap.com)
    * [Foundation](http://foundation.zurb.com)

.step.evidence.but.slide{data: t4.next}
  :markdown
    Hell of<br/>classes!
    ===

.step.but.slide{data: t4.next}
  :markdown
        <div class="row">
          <div class="col-md-8 col-main">
            <p class="text-lowercase">A</p>
          </div>
          <div class="col-md-4">
            <p class="text-lowercase">B</p>
          </div>
        </div>
        <div class="row">
          <div class="col-md-8">Entry level</div>
          <div class="col-md-4">1234</div>
        </div>

.step.or.semantic.slide{data: t4.next}
  :markdown
    "semantic" framework<br/>and a CSS preprocessor
    ===

.step.or.slide{data: t4.next}
  :markdown
    [Bourbon](http://bourbon.io) plus [Neat](http://neat.bourbon.io)
    plus [SASS](http://sass-lang.com) or [Less](http://lesscss.org)

    In HTML:

        <section>
          <aside>What is it about?</aside>
          <article>Semantic grid framework...</article>
        </section>

    And in CSS:

        section {
          @include outer-container;

          aside { @include span-columns(3); }
          article { @include span-columns(9); }
        }





.step.or.amcss.slide{data: t5.next}
  :markdown
    [AMCSS](https://amcss.github.io)
    ===

.step.or.slide{data: t5.next}
  :markdown
    A different direction
    ===

    > Attribute Modules (AM) is a technique for **using HTML attributes and their values**
    > rather than classes for styling elements.
    >
    > In doing so, each attribute effectively
    > declares a **separate namespace** for encapsulating style information, resulting
    > in more readable and maintainable HTML & CSS.

.step.or.slide{data: t5.next}
  :markdown

        /* From: */
        <a class="btn btn-primary btn-lg">Click me!</a>

        /* To: */
        <a am-Button="primary large">Click me!</a>

        /* Or: */
        <a data-am-Button="primary large">Click me!</a>

        /* In CSS: */
        [am-Button] {}
        [am-Button~="primary"] {}
        [am-Button~="large"] {}

.step.or.the-end.slide{data: t5.next}
  :markdown
    So perfect!
    ===

    * [amcss](https://github.com/sistrall/amcss)
    * [amcss-rails](https://github.com/sistrall/amcss-rails)

.step#overview{data: {x: 0, y: 0, scale: 10}}
